name: Release Pipeline with Version Check

on:
  workflow_call:
    inputs: 
      solution_name:
        description: 'The solution name.'
        type: string
        default: ALI_G1        
      solution_shipping_folder:
        description: 'Folder name for staging the exported solution *do not change*'        
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'Staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
        description: 'Folder name to be created and checked in *do not change*'
        type: string
        default: solutions/
      solution_release_folder:
        description: 'Folder where the released binaries are going to be hosted *do not change*'
        type: string
        default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment URL.'
        type: string
        required: true        
      QA_ENVIRONMENT_URL:
        description: 'QA environment URL.'
        type: string
        required: true
      UAT_ENVIRONMENT_URL:
        description: 'UAT environment URL.'
        type: string
        required: true
      PRODUCTION_ENVIRONMENT_URL: 
        description: 'Production environment URL.'
        type: string
        required: true
      CLIENT_ID: 
        description: 'The client ID.'
        type: string
        required: true
      TENANT_ID: 
        description: 'The tenant ID.'
        type: string
        required: true
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN.'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@v0
        with:
          solution-folder: ${{ inputs.solution_source_folder }}${{ inputs.solution_name }}
          solution-file: ${{ inputs.solution_outbound_folder }}${{ inputs.solution_name }}.zip
          solution-type: Unmanaged    

      - name: Export solution as managed
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{ inputs.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ inputs.CLIENT_ID }}
          client-secret: ${{ secrets.envSecret }} 
          tenant-id: ${{ inputs.TENANT_ID }}
          solution-name: ${{ inputs.solution_name }}
          managed: true
          solution-output-file: ${{ inputs.solution_shipping_folder }}/${{ inputs.solution_name }}_managed.zip

      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v2
        with:
          name: managedSolutions
          path: ${{ inputs.solution_shipping_folder }}/

  release-to-environments:
    needs: [convert-to-managed]
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Fetch the ready to ship solution from GH artifact store
        uses: actions/download-artifact@v2
        with:
          name: managedSolutions
          path: ${{ inputs.solution_release_folder }}

      - name: Check Solution Availability in QA
        id: check_qa
        run: |
          result=$(pwsh -c "Get-InstalledSolution -EnvironmentUrl '${{ inputs.QA_ENVIRONMENT_URL }}' -ClientId '${{ inputs.CLIENT_ID }}' -ClientSecret '${{ secrets.envSecret }}' -TenantId '${{ inputs.TENANT_ID }}' -SolutionName '${{ inputs.solution_name }}'")
          if [[ "$result" == "false" ]]; then
            echo "Solution not found in QA. Skipping deployment."
            exit 0
          fi
          
      - name: Increment Version and Import Solution to QA
        if: steps.check_qa.outputs.found == 'true'
        run: |
          version=$(pwsh -c "Get-SolutionVersion -EnvironmentUrl '${{ inputs.QA_ENVIRONMENT_URL }}' -ClientId '${{ inputs.CLIENT_ID }}' -ClientSecret '${{ secrets.envSecret }}' -TenantId '${{ inputs.TENANT_ID }}' -SolutionName '${{ inputs.solution_name }}'")
          # Increment version here
          new_version=$(echo $version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "New version: $new_version"
          pwsh -c "Import-Solution -EnvironmentUrl '${{ inputs.QA_ENVIRONMENT_URL }}' -ClientId '${{ inputs.CLIENT_ID }}' -ClientSecret '${{ secrets.envSecret }}' -TenantId '${{ inputs.TENANT_ID }}' -SolutionFile '${{ inputs.solution_release_folder }}/${{ inputs.solution_name }}_managed.zip' -Version '$new_version' -ForceOverwrite -PublishChanges"
          
      # Repeat similar blocks for UAT and PROD deployments...
